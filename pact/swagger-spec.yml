openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_hello
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: string
  /users:
    post:
      operationId: UsersController_createUser
      summary: ""
      description: Creates a new User.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "409":
          description: User with given email already exists
      tags:
        - users
  /auth:
    post:
      operationId: AuthController_login
      summary: ""
      description: Logs in with a correct email and password. Returns the user and
        token for accessing protected routes.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestDto"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponseDto"
        "202":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponseDto"
        "401":
          description: Password mismatch
        "404":
          description: User with given email does not exist
      tags:
        &a1
        - auth
  /auth/me:
    get:
      operationId: AuthController_me
      summary: ""
      description: Must be authenticated. Returns the User making the request.
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "202":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized (not authenticated or role insufficient)
      tags: *a1
      security:
        - bearer: []
info:
  title: C4C Backend Docs
  description: API docs for a C4C backend.
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: Bearer {token}
      type: http
  schemas:
    CreateUserDto:
      type: object
      properties:
        email:
          type: string
          description: A valid email address.
          example: jung.ry@northeastern.edu
        role:
          type: string
          enum:
            - researcher
            - admin
        password:
          type: string
          description: A valid password.
          example: password123
          minLength: 8
      required:
        - email
        - role
        - password
    User:
      type: object
      properties:
        id:
          type: number
        email:
          type: string
        role:
          enum:
            - researcher
            - admin
          type: string
        password:
          type: string
          minLength: 8
      required:
        - id
        - email
        - role
        - password
    LoginRequestDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 8
      required:
        - email
        - password
    LoginResponseDto:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        jwt:
          type: string
          description: The jason web token generated for the user
      required:
        - user
        - jwt
